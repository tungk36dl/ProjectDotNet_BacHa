@model BacHa.Models.User

@{
    ViewData["Title"] = "Register";
}

<div class="row justify-content-center mt-4">
    <div class="col-md-8 col-lg-6">
        <div class="card shadow-sm">
            <div class="card-body">
                <h4 class="card-title mb-3">Register</h4>

                <form asp-action="Register" method="post">
                    @Html.AntiForgeryToken()
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-2"></div>

                    <div class="mb-3">
                        <label asp-for="UserName" class="form-label"></label>
                        <input asp-for="UserName" class="form-control" />
                        @Html.ValidationMessageFor(m => m.UserName, null, new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        <label asp-for="Email" class="form-label"></label>
                        <input asp-for="Email" class="form-control" />
                        @Html.ValidationMessageFor(m => m.Email, null, new { @class = "text-danger" })
                    </div>

                    <div class="mb-3">
                        <label asp-for="FullName" class="form-label"></label>
                        <input asp-for="FullName" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input id="password" name="password" type="password" class="form-control" />
                        @* Show server-side validation errors for non-model field 'Password' *@
                        @if (ViewData.ModelState.TryGetValue("Password", out var pwdState) && pwdState.Errors.Count > 0)
                        {
                            <div class="text-danger mt-1">
                                @foreach (var err in pwdState.Errors)
                                {
                                    <div>@err.ErrorMessage</div>
                                }
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <input id="confirmPassword" name="confirmPassword" type="password" class="form-control" />
                        <div id="passwordMatchError" class="text-danger mt-1" style="display: none;">
                            Passwords do not match
                        </div>
                    </div>

                    <div class="d-flex justify-content-between align-items-center">
                        <button type="submit" class="btn btn-primary">Register</button>
                        <a asp-action="Login" class="btn btn-link">Login</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <style>
        .form-control.is-valid {
            border-color: #28a745;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
        }
        
        .form-control.is-invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
        
        .form-control.is-valid:focus {
            border-color: #28a745;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
        }
        
        .form-control.is-invalid:focus {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }
        
        #passwordMatchError {
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
    </style>
    <script>
        (function(){
            const form = document.querySelector('form[asp-action="Register"]');
            if (!form) return;

            // Real-time password validation
            const passwordInput = document.getElementById('password');
            const confirmPasswordInput = document.getElementById('confirmPassword');
            const passwordMatchError = document.getElementById('passwordMatchError');

            function validatePasswordMatch() {
                const password = passwordInput.value;
                const confirmPassword = confirmPasswordInput.value;
                
                // Clear previous error styling
                confirmPasswordInput.classList.remove('is-invalid', 'is-valid');
                passwordMatchError.style.display = 'none';
                
                // Only validate if both fields have content
                if (password && confirmPassword) {
                    if (password !== confirmPassword) {
                        confirmPasswordInput.classList.add('is-invalid');
                        passwordMatchError.style.display = 'block';
                        passwordMatchError.textContent = 'Passwords do not match';
                        return false;
                    } else {
                        confirmPasswordInput.classList.add('is-valid');
                        passwordMatchError.style.display = 'none';
                        return true;
                    }
                } else if (confirmPassword && !password) {
                    // If confirm password has content but password is empty
                    confirmPasswordInput.classList.add('is-invalid');
                    passwordMatchError.style.display = 'block';
                    passwordMatchError.textContent = 'Please enter password first';
                    return false;
                }
                
                return true;
            }

            // Add visual feedback for password strength
            function validatePasswordStrength() {
                const password = passwordInput.value;
                const confirmPassword = confirmPasswordInput.value;
                
                passwordInput.classList.remove('is-invalid', 'is-valid');
                
                if (password) {
                    if (password.length < 6) {
                        passwordInput.classList.add('is-invalid');
                    } else {
                        passwordInput.classList.add('is-valid');
                    }
                }
                
                // Re-validate confirm password when password changes
                if (confirmPassword) {
                    validatePasswordMatch();
                }
            }

            // Event listeners for real-time validation
            passwordInput.addEventListener('input', validatePasswordStrength);
            confirmPasswordInput.addEventListener('input', validatePasswordMatch);
            
            // Also validate on blur (when user leaves the field)
            confirmPasswordInput.addEventListener('blur', validatePasswordMatch);

            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                // Validate password match before submitting
                if (!validatePasswordMatch()) {
                    return;
                }

                // clear previous errors
                document.querySelectorAll('.text-danger._ajax').forEach(n => n.remove());
                document.querySelectorAll('[data-ajax-summary]').forEach(n => n.textContent = '');

                const formData = new FormData(form);
                const token = form.querySelector('input[name="__RequestVerificationToken"]')?.value;

                const body = new URLSearchParams();
                for (const pair of formData.entries()) {
                    body.append(pair[0], pair[1]);
                }

                const resp = await fetch(form.action, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
                    },
                    body: body.toString()
                });

                const data = await resp.json();
                if (data.success) {
                    // reload to reflect login state or redirect
                    window.location.href = '/';
                    return;
                }

                // show general message
                if (data.message) {
                    let summary = document.querySelector('[asp-validation-summary]') || document.querySelector('[data-ajax-summary]');
                    if (!summary) {
                        summary = document.createElement('div');
                        summary.setAttribute('data-ajax-summary', '');
                        summary.className = 'text-danger mb-2';
                        form.prepend(summary);
                    }
                    summary.textContent = data.message;
                }

                // show field errors
                if (data.fieldErrors) {
                    for (const field in data.fieldErrors) {
                        const messages = data.fieldErrors[field];
                        // try to find input by name (for model fields use property name)
                        let input = form.querySelector('[name="' + field + '"]') || form.querySelector('[name="' + field.replace('User.', '') + '"]') || form.querySelector('[name="' + field + '"]');
                        // if not found, try asp-for generated id
                        if (!input) input = document.getElementById(field) || document.getElementById('User_' + field);

                        const container = document.createElement('div');
                        container.className = 'text-danger _ajax mt-1';
                        container.innerHTML = messages.map(m => '<div>' + m + '</div>').join('');

                        if (input) {
                            input.parentNode.appendChild(container);
                        } else {
                            // append to summary
                            let summary = document.querySelector('[data-ajax-summary]');
                            if (!summary) {
                                summary = document.createElement('div');
                                summary.setAttribute('data-ajax-summary', '');
                                summary.className = 'text-danger mb-2';
                                form.prepend(summary);
                            }
                            summary.appendChild(container);
                        }
                    }
                }
            });
        })();
    </script>
}
